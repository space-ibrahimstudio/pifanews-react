name: PIFA v0.1.0

on:
  push:
    branches:
      - main
  # schedule:
  #   - cron: "0 0 */2 * *"

jobs:
  web-deploy:
    name: Deploy on Main
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.12.1]

    steps:
      - name: 1. Get latest code
        uses: actions/checkout@v2

      - name: 2. Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}

      - name: 3. Export environment variables
        run: |
          echo "CI_ENVIRONMENT_URL=${{ secrets.CI_ENVIRONMENT_URL }}" >> $GITHUB_ENV
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" >> $GITHUB_ENV
          echo "REACT_APP_DOMAIN_URL=${{ secrets.REACT_APP_DOMAIN_URL }}" >> $GITHUB_ENV
          echo "REACT_APP_IMAGE_URL=${{ secrets.REACT_APP_IMAGE_URL }}" >> $GITHUB_ENV
          echo "REACT_APP_MARKERS=${{ secrets.REACT_APP_MARKERS }}" >> $GITHUB_ENV

      - name: 4. Installing required packages
        run: npm install

      - name: 5. Builds the app for production
        run: CI= npm run stagen

      - name: 6. List output files
        run: find build/ -print

      - name: 7. Sync files (excluding berita folder)
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: ${{ secrets.FTP_HOST_PROD }}
          username: ${{ secrets.FTP_USERNAME_PROD }}
          password: ${{ secrets.FTP_PASSWORD_PROD }}
          local-dir: build/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/berita/**

      # - name: 8. Sync "berita" folder to temp
      #   uses: SamKirkland/FTP-Deploy-Action@4.3.3
      #   with:
      #     server: ${{ secrets.FTP_HOST_PROD }}
      #     username: ${{ secrets.FTP_USERNAME_PROD }}
      #     password: ${{ secrets.FTP_PASSWORD_PROD }}
      #     local-dir: build/berita/
      #     server-dir: berita_temp/

      # - name: 9. Sync "berita" folder (preserve older slugs)
      #   run: |
      #     ftp -inv ${{ secrets.FTP_HOST_PROD }} <<EOF
      #     user ${{ secrets.FTP_USERNAME_PROD }} ${{ secrets.FTP_PASSWORD_PROD }}
      #     cd berita_temp
      #     mls * /tmp/filelist.txt
      #     lcd /tmp
      #     mget *.txt *.jpg *.png
      #     cd ../berita
      #     mput *
      #     bye
      #     EOF

      # - name: 9. Install Python
      #   run: sudo apt-get install -y python3

      # - name: 10. FTP Recursive Move using Python
      #   env:
      #     FTP_HOST: ${{ secrets.FTP_HOST_PROD }}
      #     FTP_USERNAME: ${{ secrets.FTP_USERNAME_PROD }}
      #     FTP_PASSWORD: ${{ secrets.FTP_PASSWORD_PROD }}
      #   run: python3 ftp_move.py

      - name: 8. Create FTP Script
        run: |
          echo "open ${{ secrets.FTP_HOST_PROD }}" >> ftp_commands.txt
          echo "user ${{ secrets.FTP_USERNAME_PROD }} ${{ secrets.FTP_PASSWORD_PROD }}" >> ftp_commands.txt
          echo "binary" >> ftp_commands.txt
          echo "lcd build/berita" >> ftp_commands.txt
          echo "cd berita" >> ftp_commands.txt
          echo "mput -O . *" >> ftp_commands.txt
          echo "bye" >> ftp_commands.txt

      - name: 9. Deploy via FTP
        run: ftp -inv < ftp_commands.txt
